class Solution {
public:
    int maxArea(vector<int>& height) {
        int i = 0,j = height.size() - 1;

        // S(i,j) = min(h[i],h[j]) * (j - i);

        // 在每个状态下，无论长板或短板向中间收窄一格，都会导致水槽 底边宽度 −1 变短：
        // 因此，初始化双指针分列水槽左右两端，循环每轮将短板向内移动一格，并更新面积最大值，直到两指针相遇时跳出；即可获得最大面积。
        int res = 0;
        while (i < j) {
            res = height[i] < height[j] ?
                max(res,(j - i) * height[i ++]) :
                 max(res,(j - i) * height[j --]);
        }
        return res;
    }
};
