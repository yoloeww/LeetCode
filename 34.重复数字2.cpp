class Solution {
    public int[] singleNumbers(int[] nums) {
        int res=0;//相同取0，相异取1，因此0^0=0,0^1=1,0异或任何数都为本身，可理解为没影响
        for (int n: nums) {
            res ^=n;//假设两个只出现一次的数分别为a和b，获得a异或b的结果
        }
        //找到ab第一个不相同的二进制位，用位与&操作（两个都为1才为1，其余为0，因此可理解0和任何数相与都还是本身）
        //理解：位与，就是0可以掩盖掉所有数字，0遇0为0，遇1还为0（子网掩码）
        //通过1的位置变化找出首个不一样的二进制位
        int m=1;
        while((m&res)==0){//m=000001，当第一位不是1时，结果为0，则m左移一位，000010类推直到找出
            m<<=1;
        }
        //找到m以后，用m划分数组，两个相同的数字，在m位一定相同，即其与m位与的结果一定是相同的，因此按m&n==0划分，就一定能保证：
        //（1）原来相同的元素还在一组
        //（2）不同的两个元素被分到了不同组
        int a=0,b=0;
        for (int n:nums) {
            if ((n&m)==0) a^=n;
            else b^=n;
        }
        return new int[]{a,b};
    }
}
